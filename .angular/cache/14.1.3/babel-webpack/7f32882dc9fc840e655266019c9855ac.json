{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, afs) {\n      this.http = http;\n      this.afs = afs;\n    }\n\n    crearJuego(command) {\n      return this.http.post(environment.apiBase + '/juego/crear', command);\n    }\n\n    iniciarJuego(command) {\n      return this.http.post(environment.apiBase + '/juego/iniciar', command);\n    }\n\n    getJugadores() {\n      return this.afs.collection(`users`).snapshotChanges().pipe(map(actions => {\n        const jugadores = actions.map(item => {\n          const data = item.payload.doc.data();\n          return {\n            uid: data.uid,\n            alias: data.displayName\n          };\n        });\n        return jugadores;\n      }));\n    }\n\n    getMiMazo(uid, juegoId) {\n      return this.http.get(environment.apiBase + '/juego/mazo/' + uid + '/' + juegoId);\n    }\n\n    getMisJuegos(uid) {\n      return this.http.get(environment.apiBase + '/juego/listar/' + uid);\n    }\n\n    getTablero(juegoId) {\n      return this.http.get(environment.apiBase + '/juego/getTablero/' + juegoId);\n    }\n\n    ponerCarta(command) {\n      return this.http.post(environment.apiBase + '/juego/poner', command);\n    }\n\n    iniciarRonda(command) {\n      return this.http.post(environment.apiBase + '/juego/ronda/iniciar', command);\n    }\n\n    iniciar(command) {\n      return this.http.post(environment.apiBase + '/juego/iniciar', command);\n    }\n\n    crearRonda(command) {\n      return this.http.post(environment.apiBase + '/juego/crear/ronda', command);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFirestore));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}