{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/api.service\";\nimport * as i2 from \"src/app/shared/services/auth.service\";\nimport * as i3 from \"src/app/shared/services/websocket.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/grid-list\";\n\nfunction BoardComponent_mat_grid_tile_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\")(1, \"mat-card\", 11)(2, \"mat-card-title-group\");\n    i0.ɵɵelement(3, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-card-content\");\n    i0.ɵɵtext(5, \" Poder 10px \");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const card_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"/assets/\", card_r2.cartaId, \"\", i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction BoardComponent_mat_grid_tile_16_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-title-group\");\n    i0.ɵɵelement(2, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-card-content\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-card-actions\")(6, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function BoardComponent_mat_grid_tile_16_mat_card_1_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const card_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.poner(card_r3.cartaId));\n    });\n    i0.ɵɵtext(7, \" MOVER A TABLERO \");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const card_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"/assets/\", card_r3.cartaId, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Poder \", card_r3.poder, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"disabled\", !card_r3.estaHabilitada);\n  }\n}\n\nfunction BoardComponent_mat_grid_tile_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\");\n    i0.ɵɵtemplate(1, BoardComponent_mat_grid_tile_16_mat_card_1_Template, 8, 3, \"mat-card\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const card_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !card_r3.estaOculta);\n  }\n} //TODO: componente para el tablero de juego\n\n\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    constructor(api, authService, ws, route, router) {\n      this.api = api;\n      this.authService = authService;\n      this.ws = ws;\n      this.route = route;\n      this.router = router;\n      this.cartasDelJugador = [];\n      this.cartasDelTablero = [];\n      this.tiempo = 0;\n      this.jugadoresRonda = 0;\n      this.jugadoresTablero = 0;\n      this.numeroRonda = 0;\n      this.juegoId = \"\";\n      this.uid = \"\";\n      this.roundStarted = false;\n    }\n\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        this.juegoId = params['id'];\n        this.uid = this.authService.user.uid;\n        this.api.getMiMazo(this.uid, this.juegoId).subscribe(element => {\n          this.cartasDelJugador = element.cartas;\n        });\n        this.api.getTablero(this.juegoId).subscribe(element => {\n          this.cartasDelTablero = Object.entries(element.tablero.cartas).flatMap(a => {\n            return a[1];\n          });\n          this.tiempo = element.tiempo;\n          this.jugadoresRonda = element.ronda.jugadores.length;\n          this.jugadoresTablero = element.tablero.jugadores.length;\n          this.numeroRonda = element.ronda.numero;\n        });\n        this.ws.connect(this.juegoId);\n        this.ws.subscribe(event => {\n          console.log(event);\n\n          if (event.type === 'cardgame.ponercartaentablero') {\n            this.cartasDelTablero.push({\n              cartaId: event.carta.cartaId.uuid,\n              poder: event.carta.poder,\n              estaOculta: event.carta.estaOculta,\n              estaHabilitada: event.carta.estaHabilitada\n            });\n          }\n\n          if (event.type === 'cardgame.cartaquitadadelmazo') {\n            this.cartasDelJugador = this.cartasDelJugador.filter(item => item.cartaId !== event.carta.cartaId.uuid);\n          }\n\n          if (event.type === 'cardgame.tiempocambiadodeltablero') {\n            this.tiempo = event.tiempo;\n          }\n\n          if (event.type === 'cardgame.rondacreada') {\n            this.tiempo = event.tiempo;\n            this.jugadoresRonda = event.ronda.jugadores.length;\n            this.numeroRonda = event.ronda.numero;\n          }\n\n          if (event.type === 'cardgame.rondainiciada') {\n            this.roundStarted = true;\n          }\n\n          if (event.type === 'cardgame.rondaterminada') {\n            this.roundStarted = false; //Las cartas a 0.\n            //Apostar cartas solo cuando inicie la ronda\n            //window.location.reload();\n          }\n\n          if (event.type === 'cardgame.juegofinalizado') {\n            //ALERTA\n            if (confirm(\"El ganador es \" + event.alias)) {\n              this.router.navigate(['home']);\n            }\n          }\n\n          if (event.type === 'cardgame.cartasasignadasajugador') {\n            console.log(event);\n            event.ganadorId.uuid === this.uid ? alert(\"Ganaste la ronda!\") : alert(\"Perdiste la ronda :(\");\n          }\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      this.ws.close();\n    }\n\n    poner(cartaId) {\n      this.api.ponerCarta({\n        cartaId: cartaId,\n        juegoId: this.juegoId,\n        jugadorId: this.uid\n      }).subscribe();\n    }\n\n    iniciarRonda() {\n      this.api.iniciarRonda({\n        juegoId: this.juegoId\n      }).subscribe();\n    }\n\n  }\n\n  BoardComponent.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.WebsocketService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n  };\n\n  BoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    decls: 17,\n    vars: 7,\n    consts: [[1, \"container-fluid\"], [1, \"row\"], [\"role\", \"main\", 1, \"col-md-7\", \"ml-sm-auto\", \"col-lg-9\", \"px-4\"], [1, \"pb-2\", \"mb-3\", \"border-bottom\"], [1, \"h2\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [1, \"inner-adjust\"], [\"cols\", \"6\", \"rowHeight\", \"1:2\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\", \"d-md-block\", \"sidebar-cards\"], [\"cols\", \"5\", \"rowHeight\", \"2:4\"], [1, \"m-2\"], [\"mat-card-image\", \"\", 3, \"src\"], [4, \"ngIf\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\");\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"main\", 2)(4, \"div\", 3)(5, \"h1\", 4);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"h4\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_9_listener() {\n          return ctx.iniciarRonda();\n        });\n        i0.ɵɵtext(10, \" INICIAR \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"mat-grid-list\", 7);\n        i0.ɵɵtemplate(13, BoardComponent_mat_grid_tile_13_Template, 6, 1, \"mat-grid-tile\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"mat-grid-list\", 10);\n        i0.ɵɵtemplate(16, BoardComponent_mat_grid_tile_16_Template, 2, 1, \"mat-grid-tile\", 8);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Cuenta Regresiva \", ctx.tiempo, \"s\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate3(\"RONDA # \", ctx.numeroRonda, \" Jugadores [\", ctx.jugadoresRonda, \"/\", ctx.jugadoresTablero, \"]\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"disabled\", ctx.roundStarted);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cartasDelTablero);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cartasDelJugador);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.MatCard, i6.MatCardTitleGroup, i6.MatCardContent, i6.MatCardActions, i6.MatCardImage, i7.MatButton, i8.MatGridList, i8.MatGridTile]\n  });\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}