{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { FormControl } from '@angular/forms';\nimport { v4 as uuidv4 } from 'uuid';\nimport { map, startWith } from \"rxjs/operators\";\nexport class User {\n  constructor(displayName, email, uid, selected) {\n    this.displayName = displayName;\n    this.email = email;\n    this.uid = uid;\n    this.selected = selected;\n    if (selected === undefined) selected = false;\n  }\n\n}\nlet NewGameComponent = class NewGameComponent {\n  constructor(afs, api, ws, router, authService) {\n    this.afs = afs;\n    this.api = api;\n    this.ws = ws;\n    this.router = router;\n    this.authService = authService;\n    this.userControl = new FormControl();\n    this.users = new Array();\n    this.selectedUsers = new Array();\n    this.lastFilter = \"\";\n  }\n\n  ngOnInit() {\n    this.afs.collection(`users`).snapshotChanges().subscribe(actions => {\n      this.users = actions.map(item => {\n        const data = item.payload.doc.data();\n        const selected = this.authService.user.uid === data.uid;\n        const user = new User(data.displayName, data.email, data.uid, selected);\n\n        if (selected) {\n          this.selectedUsers.push(user);\n        }\n\n        return user;\n      });\n      console.log(this.users);\n      this.filteredUsers = this.userControl.valueChanges.pipe(startWith(\"\"), map(value => typeof value === \"string\" ? value : this.lastFilter), map(filter => this.filter(filter)));\n    });\n    this.uuid = uuidv4();\n    this.ws.connect(this.uuid).subscribe({\n      next: event => {\n        if (event.type === 'cardgame.juegocreado') {\n          this.router.navigate(['list']);\n        }\n      },\n      error: err => console.log(err),\n      complete: () => console.log('complete')\n    });\n  }\n\n  ngOnDestroy() {\n    this.ws.close();\n  }\n\n  crearJuego() {\n    const jugadores = {};\n    this.selectedUsers.forEach(user => {\n      jugadores[user.uid] = user.displayName;\n    });\n    return this.api.crearJuego({\n      juegoId: this.uuid,\n      jugadores,\n      jugadorPrincipalId: this.authService.userData.uid\n    }).subscribe();\n  }\n\n  filter(filter) {\n    this.lastFilter = filter;\n\n    if (filter) {\n      return this.users.filter(option => {\n        return option.email.toLowerCase().indexOf(filter.toLowerCase()) >= 0 || option.displayName.toLowerCase().indexOf(filter.toLowerCase()) >= 0;\n      });\n    } else {\n      return this.users;\n    }\n  }\n\n  displayFn(value) {\n    let displayValue = \"\";\n\n    if (Array.isArray(value)) {\n      value.forEach((user, index) => {\n        if (index === 0) {\n          displayValue = user.displayName + \" [\" + user.email + \"]\";\n        } else {\n          displayValue += \", \" + user.displayName + \" [\" + user.email + \"]\";\n        }\n      });\n    } else {\n      displayValue = value;\n    }\n\n    return displayValue;\n  }\n\n  optionClicked(event, user) {\n    event.stopPropagation();\n    this.toggleSelection(user);\n  }\n\n  toggleSelection(user) {\n    user.selected = !user.selected;\n\n    if (user.selected) {\n      this.selectedUsers.push(user);\n    } else {\n      const i = this.selectedUsers.findIndex(value => value.uid === user.uid);\n      this.selectedUsers.splice(i, 1);\n    }\n\n    this._userInput.nativeElement.focus();\n  }\n\n};\n\n__decorate([ViewChild(\"userInput\")], NewGameComponent.prototype, \"_userInput\", void 0);\n\nNewGameComponent = __decorate([Component({\n  selector: 'app-new-game',\n  templateUrl: './new-game.component.html',\n  styleUrls: ['./new-game.component.scss']\n})], NewGameComponent);\nexport { NewGameComponent };","map":null,"metadata":{},"sourceType":"module"}